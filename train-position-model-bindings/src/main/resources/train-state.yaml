openapi: 3.0.1
info:
  version: 1.0.0
  title: positive-train-control/psm/locomotive-state-container/1.0
  description: Common definitions for PTC Unified Live State Environment.
  contact:
    name: PULSE Live State Container Support
    email: PULSE_DEV_TEAM@up.com
  license:
    name: private
paths: {}
components:
  schemas:
    PTCSubdivisionData:
      type: object
      properties:
        subdivisionId: 
          $ref: '#/components/schemas/SubdivisionIdType'
        subdivisionName:
          type: string
        lastTrainReporting:
          $ref: '#/components/schemas/TrainStateType'
        milepostSegmentStateList:
          description: 'A list of every MainTrack Mile Segment and all its included state'
          type: array
          items:
            $ref: '#/components/schemas/MilepostSegmentStateType'  
    TrainStateType:
      type: object
      properties:
        ptcLeadLocomotiveId:
          type: string
          example: UP3060
          description: "The locomotive's Id associated with this train data"
        trainId:
         type: object
         properties:
            trainSCAC:
              type: string
              example: 'BNSF'
              description: 'SCAC of the railroad that owns the train. These could be railroads other than UP'
            trainSection:
              type: string
              example: '2'
              description: '<OPTIONAL> If the section is not a numeric value, then a value of a space will be specified.'
            trainSymbol: 
              type: string
              example: 'MPDPDJ'
              description: >-
                The Alphabetic identifier of up to 7 positions that represents this Train. <br>  
                UP train symbols USUALLY break down into - <br>
                TOODD <br>
                ^^ ^ <br>
                || |_ Destination Code <br>
                ||___ Origin Code <br>
                |____ Train Type (Category) <br>
                For a coal train going from the Newark Power Plant to the Antelope Mine, the symbol would be built as follows- <br>
                CNWAT - where C is coal, NW is Newark Power Plant, and AT is the Antelope Mine.
            trainDate:
              type: string
              example: '2019-07-29'
              description: 'The actual year, month and day that a train began its scheduled trip from its origination point, formatted YYYY-MM-DD'
        maximumTrainSpeed:
          description: 'The maximum train speed in MPH (from Loco Segment 2032). If there is no equipment speed restriction associated with the train then this value is populated with zero.'
          type: integer
          example: 50
        loadedCarCount:
          description: 'The count of loaded cars on this train (from Loco Segment 2032)'
          type: integer
          example: 62
        emptyCarCount:
          description: 'The count of empty cars on this train (from Loco Segment 2032)'
          type: integer
          example: 45
        trainLength:
          description: 'Total Train Length (locomotives and cars) in FEET'
          type: integer
          example: 7567
        trailingTonnage:
          description: 'The tonnage that trails the locomotive consist. Trailing ton weights include the equipment as well as the weight of the shipments. (from Loco Segment 2032) in SHORT TONS'
          type: integer
          example: 8078
        lastReportedPosition:
          $ref: '#/components/schemas/TrainPositionReport'
        positionHistoryList:
          description: 'List of recent location reports, ordered by time'
          type: array
          items:
            $ref: '#/components/schemas/TrainPositionReport'
        locomotiveList:
          description: 'The Locomotives associated with this Train'
          type: array
          items:
              $ref: '#/components/schemas/LocomotiveStatusReport'
        subdivisionList:
          description: >-
            The subdivisions this train will travel through (order not guaranteed)
          type: array
          items:
            $ref: '#/components/schemas/SubdivisionData'
        aotuTrainData:
          $ref: '#/components/schemas/AOTUTrainData'
        trainEstimatedPositionList:
          description: 'The list contains the calculated position of the train iterations based on its last reported position.'
          type: array
          items:
            $ref: '#/components/schemas/TrainPositionReport'          
        trainActualPositionList:
          description: 'The list contains the ACTUAL positions of the train every 2 minutes for the next (2) hours'
          type: array
          items:
            $ref: '#/components/schemas/TrainPositionReport'          
      required:
      - ptcLocomotiveId

    TrainPositionReport:
      description: >- 
        The Location and Speed of a given train at a given time
      type: object
      properties:
        positionTime:        
          description: 'The date and time (in UTC) of the train position.'
          type: string
          format: date-time
          example: '2021-02-19T18:38:58.477Z'
        speedMPH:
          description: >- 
            'Train speed AND DIRECTION in MPH.
            POSTIIVE => Milepost Increasing
            NEGATIVE => Milepost Decreasing
            ZERO => STOPPED'
          type: integer
          example: '-47'
        milepostLocation:
          $ref: '#/components/schemas/MilepostLocationType'
        reversing:
          description: ' Indicates that the train is moving backwards (e.g., the lead locomotive is pushing the train - this is very uncommon).'
          type: number
          format: boolean
      required: 
      - positionTime
      
    MilepostLocationType:
      description: 'Details of a Location on the rail network. If the locomotive does not have a track location, the head end and rear end location fields are populated with zero.'
      type: object
      properties:
        subdivisionId:
          $ref: '#/components/schemas/SubdivisionIdType'
        trackName: 
          $ref: '#/components/schemas/TrackNameType'
        milepost:
         $ref: '#/components/schemas/MilepostType'
      required:
      - subdivisionId
      - trackName
      - locationMilepost
    
    MilepostType:
      type: object
      properties:
        milepostNumber:
          type: number
          format: float
          description: >-
            The milepost location of this location such that 101.25 => 1/4 of the distance between 101 and 102 note - this does NOT signify a distance of 1/4 mile!  The distance between milepost markers varies at roughly around a mile, but the marker location is not guaranteed to be at exactly a mile (due to terrain and positioning complications).  However the locations of the mileposts very rarely change and thus are still useful in position forecasting. 
          example: 58.81
      required:
        - milepost
        
    TrackNameType:
      description: 'The name of the Track on which a Train, Locomotive or Device resides'
      type: string
      example: 'MT'
    
    LocomotiveStatusReport:
      description: 'Details of a locomotive in a PTC power consist (from Loco Segment 2032)'
      type: object
      properties:
        locomotiveId:
          type: string
          example: 'UP3060'
        positionOnTrain:
          type: integer
          description: 'Position of the locomotive in the train'
          example: 1
        locomotiveWeight:
          description: 'The locomotive weight measured in short tons. The value ranges: 50 ? 400 tons.'
          type: integer
          example: 200
        locomotiveRunStatus:
          type: integer
          description: >-
            Indicates if the locomotive is running or Isolated
              * 0 - Unknown
              * 1 - Run
              * 2 - Isolated
          example: 1
        locomotiveLength:
          description: 'The length of the locomotive in feet. The value ranges: 40 - 150 feet.'
          type: integer
          example: 73
        locomotiveHorsepower:
          description: 'The locomotive horsepower. The value ranges: 0 - 10000 horsepower.'
          type: integer
          example: 4300
    
    SubdivisionData:
      description: >-
        details a subdivision being travelled through
      type: object
      properties:
        subdivisionId:
          $ref: '#/components/schemas/SubdivisionIdType'
      required:
        - subdivisionId
    
    SubdivisionIdType:
      type: integer
      description: 'The Subdivision or District ID associated with this location'
      example: 0678
      
    AOTUTrainData:
      description: 'The Augmented Operating Train Updated version data via 6657 EMP message'
      type: object
      properties:
        priorityCode:
          description: >-
            The train priority code that indicates one of the value as defined below.
              * 0 - Unknown
              * 1 - Premium (P, Z)
              * 2 - Priority (Q, K)
              * 3 - Special
              * 4 - Standard
          type: integer
          example: 4
        categoryCode:
          description: >-
            The train category code for categories such as Manifest, Auto etc.
              * 0 - Unknown
              * 1 - APL Double Stack
              * 2 - Auto
              * 3 - Beets Train
              * 4 - Coal
              * 5 - Ethanol
              * 6 - Foreign
              * 7 - Foreign Dispatch
              * 8 - Grain
              * 9 - Helper
              * 10 - Intermodal
              * 11 - Local
              * 12 - Manifest
              * 13 - Ore
              * 14 - Passenger
              * 15 - Power
              * 16 - Rock
              * 17 - Special
              * 18 - Unit
              * 19 - Work
              * 20 - Yard
          type: integer
          example: 12
        authorityRangeCode:
          description: >- 
            The train authority range that indicates one of the value as defined below.
              * 0 - Unknown
              * 1 - Local
              * 2 - Thru
              * 3 - Yard
          type: integer
          example: 1
        ownershipCode:
          description: >-
            The train ownership that indicates one of the value as defined below.
              * 0 - Unknown
              * 1 - Foreign
              * 2 - System
              * 3 - Trackage
          type: integer
          example: 2
        tenantCarrier:
          description: 'SCAC of the train tenant carrier.'
          type: string
          example: 'BNSF'
        totalCarWeight:
          description: 'Total car weight on the train in pounds.'
          type: number
          format: float
          example: 8878400.0
        totalCarLength:
          description: 'Total car length on the train in inches.'
          type: number
          format: float
          example: 91976.0
        totalLocomotiveWeight:
          description: 'Total locomotive weight on the train in pounds.'
          type: number
          format: float
          example: 8878400.0
        totalLocomotiveLength:
          description: 'Total locomotive length on the train in inches.'
          type: number
          format: float
          example: 2624.0
        actualTonsPerAxle:
          description: 'The total trailing tons of cars and dead locomotives in short tons.'
          type: number
          format: float
          example: 122.2920
        heavy143TonCarCount:
          description: 'The number of heavy 143 ton railcars in the consist (Railcars and dead locomotives).'
          type: integer
          example: 5
        heavy158TonCarCount:
          description: 'The number of heavy 158 ton railcars in the consist (Railcars and dead locomotives).'
          type: integer
          example: 5
        over158TonCarCount:
          description: 'The number of over 158 ton railcars in the consist (Railcars and dead locomotives).'
          type: integer
          example: 5
        highWideCarCount:
          description: 'The number of HW railcars in the consist.'
          type: integer
          example: 5
        eventCode:
          description: >-
            The movement event code that indicates one of the value as defined below.
              * 0 - Unknown
              * 1 - Call train
              * 2 - Crew call
              * 3 - Train Departure
              * 4 - Passing
              * 5 - Train Arrival
              * 6 - TMI Initial Train Arrival
              * 7 - Consist change
          type: integer
          example: 2
        routeLocationList:
          description: 'The list of route locations'
          type: array
          items:
            $ref: '#/components/schemas/AOTURouteLocation'

    AOTURouteLocation:
      description: 'The AOTU Route Location'
      type: object
      properties:
        locationId:
          type: integer
          format: int32
        routeSequence:
          description: 'The sequence number of the route location.'
          type: integer
          example: 1
        subdivisionId:
          $ref: '#/components/schemas/SubdivisionIdType'
        milepost:
          $ref: '#/components/schemas/MilepostType'
        stationType:
          description: >-
            Indicate Origin (O), Intermediate (I), Destination (D), or Range (R).
          type: string
          example: D
        isEventLocation:
          description: 'This value is true when it is an event location, otherwise false.'
          type: boolean
          example: false
        activityList:
          description: 'The train activity list.'
          type: array
          items:
            $ref: '#/components/schemas/AOTUActivity'
          
    AOTUActivity:
      description: 'The train AOTU Activity details.'
      type: object
      properties:
        activityCode:
          description: >-
            The activity code that indicates one of the value as defined below.
              * 0 - Unknown
              * 1 - Advance Make Train
              * 2 - Air Brake Test
              * 3 - Confirm Locomotives
              * 4 - Crew Call
              * 5 - Crew Change
              * 6 - Crew Order
              * 7 - Fuel Stop
              * 8 - Inspection
              * 9 - Make Train
              * 10 - On Duty
              * 11 - Equipment Pickup
              * 12 - Equipment Setout
              * 13 - TieUp
              * 14 - Train Set
              * 15 - Work Order
          type: integer
          example: 10
        qualifier:
          description: >-
            The activity qualifier for the group code of FUEL, INSPECTION, etc. For an instance, the group code of FUEL, the values are F (Full), K (Check), P (Partial).
          type: string
          example: 'F'
        statusCode:
          description: >-
            The activity status code as defined below.
              * 0 - Unknown
              * 1 - Completed
              * 2 - Partial
              * 3 - Stop
              * 4 - Verified
          type: integer
          example: 1
    
    MilepostSegmentStateType:
      description: 'The State of a subdivision milepost segment, a portion of main track between two mileposts'
      type: object
      properties:
        trackName:
          type: string
        milepost:
         $ref: '#/components/schemas/MilepostType'
        switchList:
          description: 'A list of every switch in this milepost segment and its last reported state'
          type: array
          items:
            $ref: '#/components/schemas/SwitchStateType'
        signalList:
          description: 'A list of every signal in this milepost segment and its last reported state'
          type: array
          items:
            $ref: '#/components/schemas/SignalStateType'
        trainList:
          description: 'A list of every train in this milepost segment and its last reported state'
          type: array
          items:
            $ref: '#/components/schemas/TrainStateType'
    
    SwitchStateType:
      description: 'The State of a Track Switch'
      type: object
      properties:
        milepostLocation:
          $ref: '#/components/schemas/MilepostType'
        switchState:
          type: integer
          description: >-
            The switch State indicates *both* the switch direction state
            0 == UNKNOWN/Switching (the state is changing or not known)
            1 == facing milepost increasing and set to remain on this train
            -1 == facing milepost decreasing and set to remain on this train
            2 == facing milepost increasing, but switched to leave this track (trains moving milepost increasing will leave this track)
            -2 == facing milepost decreasing, and switched to leave this track (trains moving milepost decreasing will leave this track)
    
    SignalStateType:
      description: 'The State of a Track Signal'
      type: object
      properties:
        milepostLocation:
          $ref: '#/components/schemas/MilepostType'
        signalState:
          type: integer
          description: >-
            signal state indicates *both* the signal indication and direction
            0 = dark
            1 = RED     (STOP)for trains moving MP increasing (e.g. the signal is facing train moving in the MP increasing direction, so trains moving MP increasing must STOP (technically it is facing MP decreasing)
            2 = YELLOW  (APPROACH) for trains moving MP increasing
            3 = FLASHING_YELLOW (ADVANCE-APPROACH) for trains moving MP increasing
            4 = GREEN   (CLEAR) for trains moving MP increasing
            -1 = RED    (STOP)for trains moving MP decreasing (e.g. the signal is facing trains moving in the MP decreasing direction (technically it is facing MP increasing)
            -2 = YELLOW (APPROACH) for trains moving MP decreasing
            -3 = FLASHING_YELLOW (ADVANCE-APPROACH) for trains moving MP decreasing